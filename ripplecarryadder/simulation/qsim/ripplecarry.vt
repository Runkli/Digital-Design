// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/20/2019 16:38:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ripplecarry
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ripplecarry_vlg_sample_tst(
	cin,
	x,
	y,
	sampler_tx
);
input  cin;
input [3:0] x;
input [3:0] y;
output sampler_tx;

reg sample;
time current_time;
always @(cin or x or y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ripplecarry_vlg_check_tst (
	cout,
	s,
	sampler_rx
);
input  cout;
input [3:0] s;
input sampler_rx;

reg  cout_expected;
reg [3:0] s_expected;

reg  cout_prev;
reg [3:0] s_prev;

reg  cout_expected_prev;
reg [3:0] s_expected_prev;

reg  last_cout_exp;
reg [3:0] last_s_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	cout_prev = cout;
	s_prev = s;
end

// update expected /o prevs

always @(trigger)
begin
	cout_expected_prev = cout_expected;
	s_expected_prev = s_expected;
end



// expected cout
initial
begin
	cout_expected = 1'bX;
end 
// expected s[ 3 ]
initial
begin
	s_expected[3] = 1'bX;
end 
// expected s[ 2 ]
initial
begin
	s_expected[2] = 1'bX;
end 
// expected s[ 1 ]
initial
begin
	s_expected[1] = 1'bX;
end 
// expected s[ 0 ]
initial
begin
	s_expected[0] = 1'bX;
end 
// generate trigger
always @(cout_expected or cout or s_expected or s)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cout = %b | expected s = %b | ",cout_expected_prev,s_expected_prev);
	$display("| real cout = %b | real s = %b | ",cout_prev,s_prev);
`endif
	if (
		( cout_expected_prev !== 1'bx ) && ( cout_prev !== cout_expected_prev )
		&& ((cout_expected_prev !== last_cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cout_expected_prev);
		$display ("     Real value = %b", cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cout_exp = cout_expected_prev;
	end
	if (
		( s_expected_prev[0] !== 1'bx ) && ( s_prev[0] !== s_expected_prev[0] )
		&& ((s_expected_prev[0] !== last_s_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[0] = s_expected_prev[0];
	end
	if (
		( s_expected_prev[1] !== 1'bx ) && ( s_prev[1] !== s_expected_prev[1] )
		&& ((s_expected_prev[1] !== last_s_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[1] = s_expected_prev[1];
	end
	if (
		( s_expected_prev[2] !== 1'bx ) && ( s_prev[2] !== s_expected_prev[2] )
		&& ((s_expected_prev[2] !== last_s_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[2] = s_expected_prev[2];
	end
	if (
		( s_expected_prev[3] !== 1'bx ) && ( s_prev[3] !== s_expected_prev[3] )
		&& ((s_expected_prev[3] !== last_s_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_exp[3] = s_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ripplecarry_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cin;
reg [3:0] x;
reg [3:0] y;
// wires                                               
wire cout;
wire [3:0] s;

wire sampler;                             

// assign statements (if any)                          
ripplecarry i1 (
// port map - connection between master ports and signals/registers   
	.cin(cin),
	.cout(cout),
	.s(s),
	.x(x),
	.y(y)
);

// cin
initial
begin
	cin = 1'b0;
	cin = #160000 1'b1;
	cin = #60000 1'b0;
	cin = #160000 1'b1;
	cin = #60000 1'b0;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b0;
	x[3] = #50000 1'b1;
	x[3] = #80000 1'b0;
	x[3] = #160000 1'b1;
	x[3] = #80000 1'b0;
	x[3] = #70000 1'b1;
	x[3] = #50000 1'b0;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b0;
	x[2] = #50000 1'b1;
	x[2] = #80000 1'b0;
	x[2] = #160000 1'b1;
	x[2] = #60000 1'b0;
	x[2] = #90000 1'b1;
	x[2] = #50000 1'b0;
end 
// x[ 1 ]
initial
begin
	x[1] = 1'b0;
	x[1] = #50000 1'b1;
	x[1] = #80000 1'b0;
	x[1] = #160000 1'b1;
	x[1] = #60000 1'b0;
	x[1] = #90000 1'b1;
	x[1] = #50000 1'b0;
end 
// x[ 0 ]
initial
begin
	x[0] = 1'b0;
	x[0] = #50000 1'b1;
	x[0] = #80000 1'b0;
	x[0] = #160000 1'b1;
	x[0] = #80000 1'b0;
	x[0] = #140000 1'b1;
	x[0] = #40000 1'b0;
end 
// y[ 3 ]
initial
begin
	y[3] = 1'b0;
	y[3] = #80000 1'b1;
	y[3] = #80000 1'b0;
	y[3] = #80000 1'b1;
	y[3] = #440000 1'b0;
end 
// y[ 2 ]
initial
begin
	y[2] = 1'b0;
	y[2] = #320000 1'b1;
	y[2] = #80000 1'b0;
	y[2] = #80000 1'b1;
	y[2] = #200000 1'b0;
end 
// y[ 1 ]
initial
begin
	y[1] = 1'b1;
	y[1] = #240000 1'b0;
	y[1] = #320000 1'b1;
	y[1] = #80000 1'b0;
end 
// y[ 0 ]
initial
begin
	y[0] = 1'b0;
	y[0] = #320000 1'b1;
	y[0] = #80000 1'b0;
	y[0] = #80000 1'b1;
	y[0] = #200000 1'b0;
end 

ripplecarry_vlg_sample_tst tb_sample (
	.cin(cin),
	.x(x),
	.y(y),
	.sampler_tx(sampler)
);

ripplecarry_vlg_check_tst tb_out(
	.cout(cout),
	.s(s),
	.sampler_rx(sampler)
);
endmodule

